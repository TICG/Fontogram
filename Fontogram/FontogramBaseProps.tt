<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="FgPropDefs.tt.txt" #>
using System.Windows;

namespace PergleLabs.UI
{

    public partial class FontogramBase
        : FontogramProperties
    {
<#
foreach (string propName in PropertyNames())
{
    string depPropName = $"{propName}Property";
#>

        // <#= propName #>
        public static readonly DependencyProperty <#= propName #>Property = DependencyProperty.Register(
            "<#= propName #>", typeof(string), typeof(FontogramBase), new PropertyMetadata(null, On<#= propName #>Changed) );
        private static void On<#= propName #>Changed(DependencyObject depObj, DependencyPropertyChangedEventArgs e)
        {
            FontogramBase fgObj = depObj as FontogramBase;
            fgObj.SetPropertyValuesInLayers(e.NewValue as string, fgObj.<#= propName #>_readyMade, e.Property.Name);
        }
        public string <#= propName #>
        {
            get { return (string)GetValue(<#= propName #>Property); }
            set { SetValue(<#= propName #>Property, value); }
        }
        private string __<#= propName #>_readyMade;
        private string <#= propName #>_readyMade
        {
            get { return __<#= propName #>_readyMade; }
            set { __<#= propName #>_readyMade = value; SetPropertyValuesInLayers(<#= propName #>, value, "<#= propName #>"); }
        }
<#
}
#>


        #region ReadyMade support

        protected void ClearReadyMade()
        {
            ClearLayers();
<#
foreach (string propName in PropertyNames())
{
#>
            <#= propName #>_readyMade = "";
<#
}
#>
        }

        protected void SetReadyMade(
<#
bool isFirst = true;
foreach (string propName in PropertyNames())
{
    if (isFirst)
    {
#>
              string _<#= propName #>_readyMade
<#
        isFirst = false;
    }
    else
    {
#>
            , string _<#= propName #>_readyMade
<#
    }
#>
<#
}
#>
        )
        {
<#
foreach (string propName in PropertyNames())
{
#>
            <#= propName #>_readyMade = _<#= propName #>_readyMade;
<#
}
#>
        }

        #endregion

    }


    
    // We need to have another class for ready-made support, because there seem to be problems when generic
    // classes contain dependency properties. (At least XAML complains by underlining the properties.)
    public abstract class FontogramBase<_T>
        : FontogramBase
        where _T : struct, System.Enum
    {

        protected static void OnReadyMadeChanged(DependencyObject depObj, DependencyPropertyChangedEventArgs e)
        {
            FontogramBase<_T> fgObj = depObj as FontogramBase<_T>;

            fgObj.ClearReadyMade();

            if (e.NewValue == null)
                return;


            _T readyMadeID = (_T)e.NewValue;

            if (!fgObj.GetReadyMadeProperties(readyMadeID
<#
foreach (string propName in PropertyNames())
{
#>
                , out string _<#= propName #>
<#
}
#>
                ))
                return;


            fgObj.SetReadyMade(
<#
isFirst = true;
foreach (string propName in PropertyNames())
{
    if (isFirst)
    {
#>
                _<#= propName #>
<#
        isFirst = false;
    }
    else
    {
#>
                , _<#= propName #>
<#
    }
#>
<#
}
#>
                );
        }


        protected abstract bool GetReadyMadeProperties(_T readyMadeID
<#
foreach (string propName in PropertyNames())
{
#>
            , out string _<#= propName #>
<#
}
#>
            );

    }

}